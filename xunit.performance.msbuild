<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="12.0">
  <UsingTask
      AssemblyFile="packages\xunit.buildtasks\tools\CodePlex.MSBuildTasks.dll"
      TaskName="CodePlex.MSBuildTasks.RegexReplace"/>

  <!-- Settings -->

  <PropertyGroup>
    <SolutionName Condition="'$(SolutionName)' == ''">xunit.performance.sln</SolutionName>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <TrackFileAccess>false</TrackFileAccess>
    <SolutionDir Condition="'$(SolutionDir)' == '' Or '$(SolutionDir)' == '*Undefined*'">$(MSBuildProjectDirectory)</SolutionDir>
    <NuGetExePath Condition="'$(NuGetExePath)' == ''">$(SolutionDir)\.nuget\nuget.exe</NuGetExePath>
    <RequestedVerbosity Condition=" '$(RequestedVerbosity)' == '' ">normal</RequestedVerbosity>
    <NugetPackageOutputDirectory Condition="'$(NugetPackageOutputDirectory)' == ''">LocalPackages</NugetPackageOutputDirectory>
  </PropertyGroup>
  <ItemGroup>
    <NuspecFiles Include="src\*.nuspec" />
    <ProjectJsonFiles Include="src\*\project.json" />
    <ProjectJsonFiles Include="dnx\*\*\project.json" />
  </ItemGroup>
  <ItemGroup Condition=" '$(PackageSources)' == '' ">
    <PackageSource Include="https://nuget.org/api/v2/" />
    <PackageSource Include="http://www.myget.org/F/b4ff5f68eccf4f6bbfed74f055f88d8f/" />
  </ItemGroup>

  <!-- Build server targets -->

  <Target Name="CI" DependsOnTargets="Clean;PackageRestore;Build;Test;Packages" />

  <Target Name="Nightly" DependsOnTargets="Clean;PackageRestore;SetVersionNumber;Build;Test;Packages" />

  <Target Name="DevBuild" DependsOnTargets="Clean;PackageRestore;Build;Packages" />

  <!-- Individual targets -->

  <Target Name="Test">
    <ItemGroup>
      <!-- For now this is the only unit test assembly we have. If/when we add more, we should
           come up with convention so that they can be discovered automatically without editing
           this file. -->
      <TestAssemblies Include="Samples\SimplePerfTests\bin\$(Configuration)\SimplePerfTests.dll" />
    </ItemGroup>

    <Exec Command="packages\xunit.runner.console.2.1.0\tools\xunit.console.exe @(TestAssemblies, ' ')" />
  </Target>

  <Target Name="Clean">
    <ItemGroup>
      <CleanFileList Include="*.html;*.xml;.nuget\NuGet.exe"/>
    </ItemGroup>
    <MSBuild
        Projects="$(SolutionName)"
        Targets="Clean"
        Properties="Configuration=$(Configuration);TrackFileAccess=$(TrackFileAccess)"/>
    <Delete Files="@(CleanFileList)"/>
    <RemoveDir Directories="@(CleanFolderList)" ContinueOnError="true"/>
    <RemoveDir Directories="$(NugetPackageOutputDirectory)" ContinueOnError="true"/>
  </Target>

  <Target Name="PackageRestore" DependsOnTargets="_DownloadNuGet">
    <Message Text="Restoring NuGet packages..." Importance="High" />
    <Exec Command="&quot;$(NuGetExePath)&quot; install xunit.buildtasks -Source @(PackageSource) -SolutionDir &quot;$(SolutionDir)&quot; -Verbosity quiet -ExcludeVersion" Condition="!Exists('$(SolutionDir)\packages\xunit.buildtasks\')" />
    <Exec Command="&quot;$(NuGetExePath)&quot; restore &quot;$(SolutionDir)\$(SolutionName)&quot; -NonInteractive -Source @(PackageSource) -Verbosity quiet" />
  </Target>

  <Target Name="Build" DependsOnTargets="PackageRestore">
    <MSBuild
        Projects="$(SolutionName)"
        Targets="Build"
        Properties="Configuration=$(Configuration);TrackFileAccess=$(TrackFileAccess)"/>
  </Target>

  <Target Name="SetVersionNumber">
    <RegexReplace
        Pattern='AssemblyVersion\("99\.99\.99\.0"\)'
        Replacement='AssemblyVersion("$(BuildAssemblyVersion)")'
        Files='src\common\GlobalAssemblyInfo.cs'
        Condition=" '$(BuildAssemblyVersion)' != '' "/>
    <RegexReplace
        Pattern='AssemblyInformationalVersion\("99\.99\.99-dev"\)'
        Replacement='AssemblyInformationalVersion("$(BuildSemanticVersion)")'
        Files='src\common\GlobalAssemblyInfo.cs'
        Condition=" '$(BuildSemanticVersion)' != '' "/>
    <RegexReplace
        Pattern='"99\.99\.99-dev"'
        Replacement='"$(BuildSemanticVersion)"'
        Files='@(ProjectJsonFiles)'
        Condition=" '$(BuildSemanticVersion)' != '' "/>
  </Target>

  <Target Name='Packages'>
    <Message Text="Creating NuGet packages..." Importance="High" />
    <MakeDir Directories="$(NugetPackageOutputDirectory)" />
    <Exec Condition="'$(BuildSemanticVersion)' == ''" Command='"$(NuGetExePath)" pack %(NuspecFiles.Identity) -OutputDirectory $(NugetPackageOutputDirectory) -NoPackageAnalysis -NonInteractive -Verbosity quiet -Properties Configuration=$(Configuration);Platform=$(Platform)' />
    <Exec Condition="'$(BuildSemanticVersion)' != ''" Command='"$(NuGetExePath)" pack %(NuspecFiles.Identity) -OutputDirectory $(NugetPackageOutputDirectory) -Version $(BuildSemanticVersion) -NoPackageAnalysis -NonInteractive -Verbosity quiet -Properties Configuration=$(Configuration);Platform=$(Platform)' />
  </Target>

  <Target Name="_DownloadNuGet">
    <MakeDir Directories="$(SolutionDir)\.nuget" />
    <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition="!Exists('$(NuGetExePath)')" />
  </Target>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          try {
              OutputFilename = Path.GetFullPath(OutputFilename);

              Log.LogMessage("Downloading latest version of NuGet.exe...");
              WebClient webClient = new WebClient();
              webClient.DownloadFile("http://dist.nuget.org/win-x86-commandline/v3.1.0-beta/nuget.exe", OutputFilename);

              return true;
          }
          catch (Exception ex) {
              Log.LogErrorFromException(ex);
              return false;
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
